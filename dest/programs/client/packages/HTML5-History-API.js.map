)]}'
{"version":3,"file":"/packages/HTML5-History-API.js","sources":["HTML5-History-API/HTML5-History-API/history.iegte8.js","HTML5-History-API/settings.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,E;AACA,wC;AACA,E;AACA,0D;AACA,E;AACA,kE;AACA,E;AACA,wB;AACA,E;AACA,gD;AACA,uD;AACA,yC;AACA,E;AACA,yB;AACA,G;AACA,mB;AACA,0B;AACA,mC;AACA,mB;AACA,mD;AACA,gC;AACA,kD;AACA,uC;AACA,kC;AACA,6B;AACA,8B;AACA,+C;AACA,yC;AACA,8C;AACA,uC;AACA,4F;AACA,sC;AACA,4C;AACA,mD;AACA,+C;AACA,yD;AACA,gD;AACA,iD;AACA,wE;AACA,iE;AACA,gD;AACA,+C;AACA,yG;AACA,sF;AACA,qC;AACA,6B;AACA,sD;AACA,wH;AACA,sD;AACA,qG;AACA,sD;AACA,iF;AACA,8C;AACA,gD;AACA,sD;AACA,6C;AACA,uB;AACA,iE;AACA,iC;AACA,6C;AACA,2C;AACA,oD;AACA,wC;AACA,sC;AACA,gD;AACA,iC;AACA,8C;AACA,mC;AACA,6D;AACA,0B;AACA,oD;AACA,wB;;AAEA,O;AACA,qD;AACA,4C;AACA,M;AACA,qB;AACA,O;AACA,6B;AACA,6B;AACA,0B;AACA,M;;AAEA,O;AACA,uD;AACA,gE;AACA,mD;AACA,M;AACA,qB;AACA,O;AACA,8B;AACA,W;AACA,6B;AACA,iC;AACA,qC;AACA,W;AACA,8C;AACA,iG;AACA,6E;AACA,4C;AACA,qE;AACA,mD;AACA,mD;AACA,0C;AACA,qG;AACA,yD;AACA,qB;AACA,mF;AACA,yD;AACA,+E;AACA,uF;AACA,qB;AACA,8C;AACA,iE;AACA,uG;AACA,iB;AACA,a;AACA,U;AACA,W;AACA,+C;AACA,0B;AACA,U;AACA,6B;AACA,gC;AACA,gC;AACA,gC;AACA,W;AACA,gD;AACA,iF;AACA,oC;AACA,U;AACA,W;AACA,+C;AACA,+C;AACA,wC;AACA,U;AACA,6B;AACA,gC;AACA,gC;AACA,gC;AACA,W;AACA,mD;AACA,qD;AACA,uF;AACA,0C;AACA,U;AACA,W;AACA,sD;AACA,mD;AACA,0D;AACA,U;AACA,6B;AACA,W;AACA,qB;AACA,kC;AACA,wC;AACA,c;AACA,6B;AACA,6E;AACA,a;AACA,U;AACA,W;AACA,mD;AACA,kC;AACA,U;AACA,6B;AACA,W;AACA,kB;AACA,6B;AACA,iE;AACA,a;AACA,S;AACA,M;;AAEA,O;AACA,gD;AACA,kD;AACA,+C;AACA,sD;AACA,M;AACA,qB;AACA,O;AACA,+B;AACA,W;AACA,uC;AACA,U;AACA,sC;AACA,W;AACA,+B;AACA,gD;AACA,uC;AACA,oB;AACA,2C;AACA,a;AACA,U;AACA,W;AACA,oC;AACA,U;AACA,sC;AACA,W;AACA,4B;AACA,oC;AACA,U;AACA,W;AACA,wC;AACA,4C;AACA,6B;AACA,U;AACA,sC;AACA,W;AACA,gC;AACA,gD;AACA,6C;AACA,oB;AACA,4C;AACA,a;AACA,U;AACA,W;AACA,+C;AACA,U;AACA,sC;AACA,W;AACA,8B;AACA,6B;AACA,U;AACA,W;AACA,+C;AACA,mD;AACA,U;AACA,sC;AACA,W;AACA,iB;AACA,6B;AACA,wC;AACA,a;AACA,U;AACA,W;AACA,+C;AACA,U;AACA,sC;AACA,W;AACA,yB;AACA,W;AACA,2D;AACA,U;AACA,sC;AACA,W;AACA,qB;AACA,W;AACA,2C;AACA,U;AACA,sC;AACA,W;AACA,yB;AACA,W;AACA,kD;AACA,U;AACA,sC;AACA,W;AACA,qB;AACA,W;AACA,gD;AACA,U;AACA,sC;AACA,W;AACA,qB;AACA,6B;AACA,4C;AACA,a;AACA,U;AACA,W;AACA,4C;AACA,+C;AACA,oC;AACA,U;AACA,sC;AACA,W;AACA,mB;AACA,6B;AACA,0C;AACA,a;AACA,U;AACA,W;AACA,0C;AACA,+C;AACA,kC;AACA,U;AACA,sC;AACA,W;AACA,iB;AACA,kC;AACA,sF;AACA,c;AACA,6B;AACA,wC;AACA,a;AACA,S;AACA,M;;AAEA,O;AACA,0B;AACA,M;AACA,mB;AACA,O;AACA,8B;AACA,gB;AACA,K;;AAEA,O;AACA,0F;AACA,M;AACA,6B;AACA,0C;AACA,kC;AACA,uB;AACA,O;AACA,yD;AACA,sH;AACA,wC;AACA,mG;AACA,oD;AACA,8E;AACA,gF;AACA,wE;AACA,gE;AACA,mG;AACA,kB;AACA,gB;AACA,iE;AACA,yD;AACA,mD;AACA,oC;AACA,yD;AACA,uD;AACA,kG;AACA,2F;AACA,a;AACA,S;AACA,+D;AACA,kC;AACA,sC;AACA,iD;AACA,yC;AACA,kE;AACA,iB;AACA,wC;AACA,2B;AACA,qC;AACA,e;AACA,8D;AACA,8C;AACA,gD;AACA,iF;AACA,8G;AACA,iB;AACA,gB;AACA,sD;AACA,iC;AACA,wB;AACA,iC;AACA,mC;AACA,gC;AACA,4B;AACA,wB;AACA,gC;AACA,4B;AACA,mC;AACA,S;AACA,K;;AAEA,O;AACA,yD;AACA,O;AACA,sC;AACA,yB;AACA,6B;AACA,oD;AACA,iE;AACA,gB;AACA,wE;AACA,oC;AACA,uE;AACA,a;AACA,S;AACA,a;AACA,qD;AACA,sB;AACA,8B;AACA,S;AACA,yD;AACA,yD;AACA,iC;AACA,8C;AACA,wF;AACA,oB;AACA,yD;AACA,+B;AACA,uE;AACA,sF;AACA,iB;AACA,a;AACA,kB;AACA,K;;AAEA,O;AACA,kE;AACA,iE;AACA,+D;AACA,kE;AACA,yD;AACA,M;AACA,mF;AACA,oE;AACA,2E;AACA,0F;AACA,qF;AACA,O;AACA,oE;AACA,+C;AACA,wD;AACA,wF;AACA,8C;AACA,8C;AACA,mD;AACA,yD;AACA,gC;AACA,4B;AACA,gC;AACA,W;;AAEA,a;AACA,0E;AACA,+C;AACA,+B;AACA,wC;AACA,qE;AACA,qD;AACA,sB;AACA,S;;AAEA,iG;AACA,mD;AACA,2E;AACA,0C;AACA,8E;AACA,wD;AACA,wD;AACA,mC;AACA,4C;AACA,8E;AACA,gF;AACA,gF;AACA,a;;AAEA,kG;AACA,8E;AACA,qB;AACA,6D;AACA,qD;AACA,4D;AACA,wC;AACA,8B;AACA,iB;AACA,oD;AACA,6C;AACA,uB;AACA,kE;AACA,kE;AACA,sC;AACA,uB;AACA,uE;AACA,wB;AACA,yB;AACA,2B;AACA,kE;AACA,sE;AACA,wD;AACA,2B;AACA,6E;AACA,kC;AACA,qB;AACA,iB;AACA,gD;AACA,6C;;AAEA,8D;AACA,oE;AACA,qB;AACA,yB;AACA,gE;AACA,yD;AACA,iH;AACA,gD;AACA,6E;AACA,oE;AACA,qE;AACA,6B;AACA,yB;AACA,6B;AACA,sG;AACA,+D;AACA,sC;AACA,yB;AACA,sC;AACA,kC;AACA,iH;AACA,uF;AACA,qB;AACA,8B;AACA,8C;AACA,iC;AACA,iB;AACA,a;AACA,S;;AAEA,sB;AACA,K;;AAEA,O;AACA,8C;AACA,M;AACA,0D;AACA,8D;AACA,iD;AACA,wD;AACA,O;AACA,oE;AACA,sC;AACA,yF;AACA,0E;AACA,uC;AACA,6D;AACA,iC;AACA,W;AACA,uC;AACA,wD;AACA,gC;AACA,W;AACA,0B;AACA,K;;AAEA,O;AACA,4F;AACA,M;AACA,6E;AACA,gF;AACA,oG;AACA,mB;AACA,O;AACA,yD;AACA,kC;AACA,oE;AACA,6C;AACA,gB;AACA,yE;AACA,oE;AACA,uC;AACA,iE;AACA,oB;AACA,mD;AACA,a;AACA,S;AACA,K;;AAEA,O;AACA,+F;AACA,M;AACA,4E;AACA,qF;AACA,8E;AACA,mB;AACA,O;AACA,4D;AACA,qC;AACA,mB;AACA,4C;AACA,2C;AACA,sC;AACA,0B;AACA,iB;AACA,a;AACA,gB;AACA,kD;AACA,S;AACA,K;;AAEA,O;AACA,uF;AACA,M;AACA,+F;AACA,8F;AACA,mG;AACA,O;AACA,gD;AACA,mG;AACA,yC;AACA,mB;AACA,mE;AACA,0E;AACA,6C;AACA,8E;AACA,0G;AACA,wE;AACA,wE;AACA,4D;AACA,6C;AACA,wC;AACA,0C;AACA,yB;AACA,uB;AACA,iB;AACA,a;AACA,uG;AACA,iF;AACA,4D;AACA,mE;AACA,6D;AACA,kD;AACA,a;AACA,wB;AACA,gB;AACA,gD;AACA,S;AACA,K;;AAEA,O;AACA,mC;AACA,O;AACA,6B;AACA,oG;AACA,0B;AACA,kD;AACA,gB;AACA,gC;AACA,S;AACA,sC;AACA,sD;AACA,yB;AACA,K;;AAEA,O;AACA,gD;AACA,O;AACA,iC;AACA,iC;AACA,uC;AACA,2B;AACA,S;AACA,K;;AAEA,O;AACA,gE;AACA,M;AACA,4B;AACA,4B;AACA,iC;AACA,qC;AACA,mB;AACA,O;AACA,6D;AACA,mC;AACA,gC;AACA,0C;AACA,+C;AACA,+D;AACA,kE;AACA,uC;AACA,8B;AACA,8D;AACA,qE;AACA,wB;AACA,gE;AACA,6D;AACA,iB;AACA,a;AACA,S;AACA,sD;AACA,sD;AACA,S;AACA,mC;AACA,K;;AAEA,O;AACA,iE;AACA,M;AACA,2B;AACA,mB;AACA,O;AACA,kC;AACA,4E;AACA,sB;AACA,8G;AACA,8D;AACA,6B;AACA,mH;AACA,+B;AACA,a;AACA,mC;AACA,0C;;AAEA,uD;AACA,0C;AACA,iE;AACA,gC;AACA,kD;AACA,kD;AACA,a;AACA,4D;AACA,0D;AACA,qC;AACA,a;AACA,S;AACA,+B;AACA,sC;AACA,K;;AAEA,O;AACA,iD;AACA,M;AACA,4B;AACA,mB;AACA,O;AACA,+B;AACA,kG;AACA,+B;AACA,uF;AACA,8C;AACA,6G;AACA,0D;AACA,yG;AACA,4D;AACA,qD;AACA,uE;AACA,mD;AACA,wB;AACA,iB;AACA,8C;AACA,iC;AACA,sB;AACA,c;AACA,iC;AACA,kF;AACA,8C;AACA,0D;AACA,uE;AACA,+B;AACA,S;AACA,K;;AAEA,O;AACA,qD;AACA,M;AACA,e;AACA,O;AACA,+B;AACA,sC;AACA,sD;AACA,qH;AACA,qE;AACA,qC;AACA,kE;AACA,sG;AACA,iC;AACA,qD;AACA,+D;AACA,iB;AACA,+C;AACA,2C;AACA,2C;AACA,wB;AACA,8C;AACA,iB;AACA,a;AACA,S;AACA,K;;AAEA,O;AACA,gD;AACA,M;AACA,kB;AACA,O;AACA,qC;AACA,oF;AACA,sE;AACA,sD;AACA,0G;AACA,oD;AACA,S;AACA,K;;AAEA,O;AACA,6B;AACA,M;AACA,iF;AACA,O;AACA,2B;AACA,W;AACA,oD;AACA,W;AACA,8D;AACA,gE;AACA,sE;AACA,oE;AACA,kG;AACA,W;;AAEA,W;AACA,uE;AACA,W;AACA,sE;;AAEA,6D;AACA,uH;;AAEA,mE;AACA,4C;AACA,oD;AACA,+C;AACA,S;;AAEA,mC;AACA,iD;AACA,sC;AACA,mD;AACA,8D;AACA,kG;AACA,0D;AACA,4B;AACA,qE;AACA,mG;AACA,2D;AACA,6F;AACA,2E;AACA,sD;AACA,0E;AACA,iF;AACA,6B;AACA,6B;AACA,mE;AACA,qF;;AAEA,oE;AACA,6F;;AAEA,oD;AACA,yC;AACA,yB;;AAEA,0F;AACA,qD;AACA,+E;AACA,yB;AACA,qB;AACA,iB;AACA,a;AACA,S;;AAEA,gC;AACA,mC;AACA,wC;AACA,S;;AAEA,4E;AACA,qD;AACA,oC;AACA,S;;AAEA,kC;AACA,mC;AACA,4F;AACA,S;;AAEA,iD;AACA,yB;AACA,gB;AACA,wF;AACA,0C;AACA,a;AACA,e;AACA,8E;AACA,0E;AACA,wD;AACA,e;AACA,8D;AACA,S;;AAEA,+B;AACA,oB;AACA,K;;AAEA,O;AACA,2B;AACA,O;AACA,wB;AACA,8C;AACA,gD;AACA,6C;AACA,e;AACA,K;;AAEA,O;AACA,oD;AACA,iD;AACA,gD;AACA,8C;AACA,qC;AACA,M;AACA,sB;AACA,a;AACA,O;AACA,oD;;AAEA,O;AACA,kD;AACA,O;AACA,oD;AACA,0D;AACA,8C;;AAEA,W;;;;;;;;;;;;;;;;;;ACx5BA,sE;AACA,mE;AACA,sE;AACA,mB","sourcesContent":["/*\n * History API JavaScript Library v4.0.0\n *\n * Support: IE8+, FF3+, Opera 9+, Safari, Chrome and other\n *\n * Copyright 2011-2013, Dmitrii Pakhtinov ( spb.piksel@gmail.com )\n *\n * http://spb-piksel.ru/\n *\n * Dual licensed under the MIT and GPL licenses:\n *   http://www.opensource.org/licenses/mit-license.php\n *   http://www.gnu.org/licenses/gpl.html\n *\n * Update: 19.05.13 22:46\n */\n(function(window) {\n    // symlink to document\n    var document = window.document;\n    // HTML element\n    var documentElement = document.documentElement;\n    // symlink to sessionStorage\n    var sessionStorage = window['sessionStorage'];\n    // symlink to constructor of Object\n    var Object = window['Object'];\n    // symlink to JSON Object\n    var JSON = window['JSON'];\n    // symlink to instance object of 'Location'\n    var windowLocation = window.location;\n    // symlink to instance object of 'History'\n    var windowHistory = window.history;\n    // new instance of 'History'. The default is a reference to the original object instance\n    var historyObject = windowHistory;\n    // symlink to method 'history.pushState'\n    var historyPushState = windowHistory.pushState;\n    // symlink to method 'history.replaceState'\n    var historyReplaceState = windowHistory.replaceState;\n    // if the browser supports HTML5-History-API\n    var isSupportHistoryAPI = !!historyPushState;\n    // verifies the presence of an object 'state' in interface 'History'\n    var isSupportStateObjectInHistory = 'state' in windowHistory;\n    // symlink to method 'Object.defineProperty'\n    var defineProperty = Object.defineProperty;\n    // new instance of 'Location', for IE8 will use the element HTMLAnchorElement, instead of pure object\n    var locationObject = redefineProperty({}, 't') ? {} : document.createElement('a');\n    // prefix for the names of events\n    var eventNamePrefix = '';\n    // String that will contain the name of the method\n    var addEventListenerName = window.addEventListener ? 'addEventListener' : (eventNamePrefix = 'on') && 'attachEvent';\n    // String that will contain the name of the method\n    var removeEventListenerName = window.removeEventListener ? 'removeEventListener' : 'detachEvent';\n    // String that will contain the name of the method\n    var dispatchEventName = window.dispatchEvent ? 'dispatchEvent' : 'fireEvent';\n    // reference native methods for the events\n    var addEvent = window[addEventListenerName];\n    var removeEvent = window[removeEventListenerName];\n    var dispatch = window[dispatchEventName];\n    // default settings\n    var settings = {\"basepath\": '/', \"redirect\": 0, \"type\": '/'};\n    // key for the sessionStorage\n    var sessionStorageKey = '__historyAPI__';\n    // Anchor Element for parseURL function\n    var anchorElement = document.createElement('a');\n    // last URL before change to new URL\n    var lastURL = windowLocation.href;\n    // Control URL, need to fix the bug in Opera\n    var checkUrlForPopState = '';\n    // trigger event 'onpopstate' on page load\n    var isFireInitialState = false;\n    // store a list of 'state' objects in the current session\n    var stateStorage = {};\n    // in this object will be stored custom handlers\n    var eventsList = {};\n\n    /**\n     * Properties that will be replaced in the global\n     * object 'window', to prevent conflicts\n     *\n     * @type {Object}\n     */\n    var eventsDescriptors = {\n        \"onhashchange\": null,\n        \"onpopstate\": null\n    };\n\n    /**\n     * Properties that will be replaced/added to object\n     * 'window.history', includes the object 'history.location',\n     * for a complete the work with the URL address\n     *\n     * @type {Object}\n     */\n    var historyDescriptors = {\n        /**\n         * @namespace history\n         * @param {String} [type]\n         * @param {String} [basepath]\n         */\n        \"redirect\": function(type, basepath) {\n            settings[\"basepath\"] = basepath = basepath == null ? settings[\"basepath\"] : basepath;\n            settings[\"type\"] = type = type == null ? settings[\"type\"] : type;\n            if (window.top == window.self) {\n                var relative = parseURL(null, false, true)._relative;\n                var search = windowLocation.search;\n                var path = windowLocation.pathname;\n                if (isSupportHistoryAPI) {\n                    if (relative != basepath && (new RegExp(\"^\" + basepath + \"$\", \"i\")).test(path)) {\n                        windowLocation.replace(relative);\n                    }\n                    if ((new RegExp(\"^\" + basepath + \"$\", \"i\")).test(path + '/')) {\n                        windowLocation.replace(basepath);\n                    } else if (!(new RegExp(\"^\" + basepath, \"i\")).test(path)) {\n                        windowLocation.replace(path.replace(/^\\//, basepath) + search);\n                    }\n                } else if (path != basepath) {\n                    windowLocation.replace(basepath + '#' + path.\n                        replace(new RegExp(\"^\" + basepath, \"i\"), type) + search + windowLocation.hash);\n                }\n            }\n        },\n        /**\n         * The method adds a state object entry\n         * to the history.\n         *\n         * @namespace history\n         * @param {Object} state\n         * @param {string} title\n         * @param {string} [url]\n         */\n        pushState: function(state, title, url) {\n            historyPushState && historyPushState.apply(windowHistory, arguments);\n            changeState(state, url);\n        },\n        /**\n         * The method updates the state object,\n         * title, and optionally the URL of the\n         * current entry in the history.\n         *\n         * @namespace history\n         * @param {Object} state\n         * @param {string} title\n         * @param {string} [url]\n         */\n        replaceState: function(state, title, url) {\n            delete stateStorage[windowLocation.href];\n            historyReplaceState && historyReplaceState.apply(windowHistory, arguments);\n            changeState(state, url, true);\n        },\n        /**\n         * Object 'history.location' is similar to the\n         * object 'window.location', except that in\n         * HTML4 browsers it will behave a bit differently\n         *\n         * @namespace history\n         */\n        \"location\": {\n            set: function(value) {\n                window.location = value;\n            },\n            get: function() {\n                return isSupportHistoryAPI ? windowLocation : locationObject;\n            }\n        },\n        /**\n         * A state object is an object representing\n         * a user interface state.\n         *\n         * @namespace history\n         */\n        \"state\": {\n            get: function() {\n                return stateStorage[windowLocation.href] || null;\n            }\n        }\n    };\n\n    /**\n     * Properties for object 'history.location'.\n     * Object 'history.location' is similar to the\n     * object 'window.location', except that in\n     * HTML4 browsers it will behave a bit differently\n     *\n     * @type {Object}\n     */\n    var locationDescriptors = {\n        /**\n         * Navigates to the given page.\n         *\n         * @namespace history.location\n         */\n        assign: function(url) {\n            if (('' + url).indexOf('#') === 0) {\n                changeState(null, url);\n            } else {\n                windowLocation.assign(url);\n            }\n        },\n        /**\n         * Reloads the current page.\n         *\n         * @namespace history.location\n         */\n        reload: function() {\n            windowLocation.reload();\n        },\n        /**\n         * Removes the current page from\n         * the session history and navigates\n         * to the given page.\n         *\n         * @namespace history.location\n         */\n        replace: function(url) {\n            if (('' + url).indexOf('#') === 0) {\n                changeState(null, url, true);\n            } else {\n                windowLocation.replace(url);\n            }\n        },\n        /**\n         * Returns the current page's location.\n         *\n         * @namespace history.location\n         */\n        toString: function() {\n            return this.href;\n        },\n        /**\n         * Returns the current page's location.\n         * Can be set, to navigate to another page.\n         *\n         * @namespace history.location\n         */\n        \"href\": {\n            get: function() {\n                return parseURL()._href;\n            }\n        },\n        /**\n         * Returns the current page's protocol.\n         *\n         * @namespace history.location\n         */\n        \"protocol\": null,\n        /**\n         * Returns the current page's host and port number.\n         *\n         * @namespace history.location\n         */\n        \"host\": null,\n        /**\n         * Returns the current page's host.\n         *\n         * @namespace history.location\n         */\n        \"hostname\": null,\n        /**\n         * Returns the current page's port number.\n         *\n         * @namespace history.location\n         */\n        \"port\": null,\n        /**\n         * Returns the current page's path only.\n         *\n         * @namespace history.location\n         */\n        \"pathname\": {\n            get: function() {\n                return parseURL()._pathname;\n            }\n        },\n        /**\n         * Returns the current page's search\n         * string, beginning with the character\n         * '?' and to the symbol '#'\n         *\n         * @namespace history.location\n         */\n        \"search\": {\n            get: function() {\n                return parseURL()._search;\n            }\n        },\n        /**\n         * Returns the current page's hash\n         * string, beginning with the character\n         * '#' and to the end line\n         *\n         * @namespace history.location\n         */\n        \"hash\": {\n            set: function(value) {\n                changeState(null, ('' + value).replace(/^(#|)/, '#'), false, lastURL);\n            },\n            get: function() {\n                return parseURL()._hash;\n            }\n        }\n    };\n\n    /**\n     * Just empty function\n     *\n     * @return void\n     */\n    function emptyFunction() {\n        // dummy\n    }\n\n    /**\n     * Prepares a parts of the current or specified reference for later use in the library\n     *\n     * @param {string} [href]\n     * @param {boolean} [isWindowLocation]\n     * @param {boolean} [isNotAPI]\n     * @return {Object}\n     */\n    function parseURL(href, isWindowLocation, isNotAPI) {\n        var re = /(?:([\\w0-9]+:))?(?:\\/\\/(?:[^@]*@)?([^\\/:\\?#]+)(?::([0-9]+))?)?([^\\?#]*)(?:(\\?[^#]+)|\\?)?(?:(#.*))?/;\n        if (href && !isWindowLocation) {\n            var current = parseURL(), _pathname = current._pathname, _protocol = current._protocol;\n            // convert relative link to the absolute\n            href = /^(?:[\\w0-9]+\\:)?\\/\\//.test(href) ? href.indexOf(\"/\") === 0\n                ? _protocol + href : href : _protocol + \"//\" + current._host + (\n                href.indexOf(\"/\") === 0 ? href : href.indexOf(\"?\") === 0\n                    ? _pathname + href : href.indexOf(\"#\") === 0\n                    ? _pathname + current._search + href : _pathname.replace(/[^\\/]+$/g, '') + href\n                );\n        } else {\n            href = isWindowLocation ? href : windowLocation.href;\n            // if current browser not support History-API\n            if (!isSupportHistoryAPI || isNotAPI) {\n                // get hash fragment\n                href = href.replace(/^[^#]*/, '') || \"#\";\n                // form the absolute link from the hash\n                href = windowLocation.protocol + '//' + windowLocation.host + settings['basepath']\n                    + href.replace(new RegExp(\"^#[\\/]?(?:\" + settings[\"type\"] + \")?\"), \"\");\n            }\n        }\n        // that would get rid of the links of the form: /../../\n        anchorElement.href = href;\n        // decompose the link in parts\n        var result = re.exec(anchorElement.href);\n        // host name with the port number\n        var host = result[2] + (result[3] ? ':' + result[3] : '');\n        // folder\n        var pathname = result[4] || '/';\n        // the query string\n        var search = result[5] || '';\n        // hash\n        var hash = result[6] === '#' ? '' : (result[6] || '');\n        // relative link, no protocol, no host\n        var relative = pathname + search + hash;\n        // special links for set to hash-link, if browser not support History API\n        var nohash = pathname.replace(new RegExp(\"^\" + settings[\"basepath\"], \"i\"), settings[\"type\"]) + search;\n        // result\n        return {\n            _href: result[1] + '//' + host + relative,\n            _protocol: result[1],\n            _host: host,\n            _hostname: result[2],\n            _port: result[3] || '',\n            _pathname: pathname,\n            _search: search,\n            _hash: hash,\n            _relative: relative,\n            _nohash: nohash,\n            _special: nohash + hash\n        }\n    }\n\n    /**\n     * Initializing storage for the custom state's object\n     */\n    function storageInitialize(JSON) {\n        var storage = '';\n        if (sessionStorage) {\n            // get cache from the storage in browser\n            storage += sessionStorage.getItem(sessionStorageKey);\n        } else {\n            var cookie = document.cookie.split(sessionStorageKey + \"=\");\n            if (cookie.length > 1) {\n                storage += (cookie.pop().split(\";\").shift() || 'null');\n            }\n        }\n        try {\n            stateStorage = JSON.parse(storage) || {};\n        } catch(_e_) {\n            stateStorage = {};\n        }\n        // hang up the event handler to event unload page\n        addEvent(eventNamePrefix + 'unload', function() {\n            if (sessionStorage) {\n                // save current state's object\n                sessionStorage.setItem(sessionStorageKey, JSON.stringify(stateStorage));\n            } else {\n                // save the current 'state' in the cookie\n                var state = {};\n                if (state[windowLocation.href] = historyObject.state) {\n                    document.cookie = sessionStorageKey + '=' + JSON.stringify(state);\n                }\n            }\n        }, false);\n    }\n\n    /**\n     * This method is implemented to override the built-in(native)\n     * properties in the browser, unfortunately some browsers are\n     * not allowed to override all the properties and even add.\n     * For this reason, this was written by a method that tries to\n     * do everything necessary to get the desired result.\n     *\n     * @param {Object} object The object in which will be overridden/added property\n     * @param {String} prop The property name to be overridden/added\n     * @param {Object} [descriptor] An object containing properties set/get\n     * @param {Function} [onWrapped] The function to be called when the wrapper is created\n     * @return {Object|Boolean} Returns an object on success, otherwise returns false\n     */\n    function redefineProperty(object, prop, descriptor, onWrapped) {\n        // test only if descriptor is undefined\n        descriptor = descriptor || {set: emptyFunction};\n        // variable will have a value of true the success of attempts to set descriptors\n        var isDefinedSetter = !descriptor.set;\n        var isDefinedGetter = !descriptor.get;\n        // for tests of attempts to set descriptors\n        var test = {configurable: true, set: function() {\n            isDefinedSetter = 1;\n        }, get: function() {\n            isDefinedGetter = 1;\n        }};\n\n        try {\n            // testing for the possibility of overriding/adding properties\n            defineProperty(object, prop, test);\n            // running the test\n            object[prop] = object[prop];\n            // attempt to override property using the standard method\n            defineProperty(object, prop, descriptor);\n        } catch(_e_) {\n        }\n\n        // If the variable 'isDefined' has a false value, it means that need to try other methods\n        if (!isDefinedSetter || !isDefinedGetter) {\n            // try to override/add the property, using deprecated functions\n            if (object.__defineGetter__) {\n                // testing for the possibility of overriding/adding properties\n                object.__defineGetter__(prop, test.get);\n                object.__defineSetter__(prop, test.set);\n                // running the test\n                object[prop] = object[prop];\n                // attempt to override property using the deprecated functions\n                descriptor.get && object.__defineGetter__(prop, descriptor.get);\n                descriptor.set && object.__defineSetter__(prop, descriptor.set);\n            }\n\n            // Browser refused to override the property, using the standard and deprecated methods\n            if ((!isDefinedSetter || !isDefinedGetter) && object === window) {\n                try {\n                    // save original value from this property\n                    var originalValue = object[prop];\n                    // set null to built-in(native) property\n                    object[prop] = null;\n                } catch(_e_) {\n                }\n                // This rule for Internet Explorer 8\n                if ('execScript' in window) {\n                    /**\n                     * to IE8 override the global properties using\n                     * VBScript, declaring it in global scope with\n                     * the same names.\n                     */\n                    window['execScript']('Public ' + prop, 'VBScript');\n                } else {\n                    try {\n                        /**\n                         * This hack allows to override a property\n                         * with the set 'configurable: false', working\n                         * in the hack 'Safari' to 'Mac'\n                         */\n                        defineProperty(object, prop, {value: emptyFunction});\n                    } catch(_e_) {\n                    }\n                }\n                // set old value to new variable\n                object[prop] = originalValue;\n\n            } else if (!isDefinedSetter || !isDefinedGetter) {\n                // the last stage of trying to override the property\n                try {\n                    try {\n                        // wrap the object in a new empty object\n                        var temp = Object.create(object);\n                        defineProperty(Object.getPrototypeOf(temp) === object ? temp : object, prop, descriptor);\n                        for(var key in object) {\n                            // need to bind a function to the original object\n                            if (typeof object[key] === 'function') {\n                                temp[key] = object[key].bind(object);\n                            }\n                        }\n                        try {\n                            // to run a function that will inform about what the object was to wrapped\n                            onWrapped.call(temp, temp, object);\n                        } catch(_e_) {\n                        }\n                        object = temp;\n                    } catch(_e_) {\n                        // sometimes works override simply by assigning the prototype property of the constructor\n                        defineProperty(object.constructor.prototype, prop, descriptor);\n                    }\n                } catch(_e_) {\n                    // all methods have failed\n                    return false;\n                }\n            }\n        }\n\n        return object;\n    }\n\n    /**\n     * Adds the missing property in descriptor\n     *\n     * @param {Object} object An object that stores values\n     * @param {String} prop Name of the property in the object\n     * @param {Object|null} descriptor Descriptor\n     * @return {Object} Returns the generated descriptor\n     */\n    function prepareDescriptorsForObject(object, prop, descriptor) {\n        descriptor = descriptor || {};\n        // the default for the object 'location' is the standard object 'window.location'\n        object = object === locationDescriptors ? windowLocation : object;\n        // setter for object properties\n        descriptor.set = (descriptor.set || function(value) {\n            object[prop] = value;\n        });\n        // getter for object properties\n        descriptor.get = (descriptor.get || function() {\n            return object[prop];\n        });\n        return descriptor;\n    }\n\n    /**\n     * Wrapper for the methods 'addEventListener/attachEvent' in the context of the 'window'\n     *\n     * @param {String} event The event type for which the user is registering\n     * @param {Function} listener The method to be called when the event occurs.\n     * @param {Boolean} capture If true, capture indicates that the user wishes to initiate capture.\n     * @return void\n     */\n    function addEventListener(event, listener, capture) {\n        if (event in eventsList) {\n            // here stored the event listeners 'popstate/hashchange'\n            eventsList[event].push(listener);\n        } else {\n            // FireFox support non-standart four argument aWantsUntrusted\n            // https://github.com/devote/HTML5-History-API/issues/13\n            if (arguments.length > 3) {\n                addEvent(event, listener, capture, arguments[3]);\n            } else {\n                addEvent(event, listener, capture);\n            }\n        }\n    }\n\n    /**\n     * Wrapper for the methods 'removeEventListener/detachEvent' in the context of the 'window'\n     *\n     * @param {String} event The event type for which the user is registered\n     * @param {Function} listener The parameter indicates the Listener to be removed.\n     * @param {Boolean} capture Was registered as a capturing listener or not.\n     * @return void\n     */\n    function removeEventListener(event, listener, capture) {\n        var list = eventsList[event];\n        if (list) {\n            for(var i = list.length; --i;) {\n                if (list[i] === listener) {\n                    list.splice(i, 1);\n                    break;\n                }\n            }\n        } else {\n            removeEvent(event, listener, capture);\n        }\n    }\n\n    /**\n     * Wrapper for the methods 'dispatchEvent/fireEvent' in the context of the 'window'\n     *\n     * @param {Event|String} event Instance of Event or event type string if 'eventObject' used\n     * @param {*} [eventObject] For Internet Explorer 8 required event object on this argument\n     * @return {Boolean} If 'preventDefault' was called the value is false, else the value is true.\n     */\n    function dispatchEvent(event, eventObject) {\n        var eventType = ('' + (typeof event === \"string\" ? event : event.type)).replace(/^on/, '');\n        var list = eventsList[eventType];\n        if (list) {\n            // need to understand that there is one object of Event\n            eventObject = typeof event === \"string\" ? eventObject : event;\n            if (eventObject.target == null) {\n                // need to override some of the properties of the Event object\n                for(var props = ['target', 'currentTarget', 'srcElement', 'type']; event = props.pop();) {\n                    // use 'redefineProperty' to override the properties\n                    eventObject = redefineProperty(eventObject, event, {\n                        get: event === 'type' ? function() {\n                            return eventType;\n                        } : function() {\n                            return window;\n                        }\n                    });\n                }\n            }\n            // run function defined in the attributes 'onpopstate/onhashchange' in the 'window' context\n            ((eventType === 'popstate' ? window.onpopstate : window.onhashchange)\n                || emptyFunction).call(window, eventObject);\n            // run other functions that are in the list of handlers\n            for(var i = 0, len = list.length; i < len; i++) {\n                list[i].call(window, eventObject);\n            }\n            return true;\n        } else {\n            return dispatch(event, eventObject);\n        }\n    }\n\n    /**\n     * dispatch current state event\n     */\n    function firePopState() {\n        var o = document.createEvent ? document.createEvent('Event') : document.createEventObject();\n        if (o.initEvent) {\n            o.initEvent('popstate', false, false);\n        } else {\n            o.type = 'popstate';\n        }\n        o.state = historyObject.state;\n        // send a newly created events to be processed\n        dispatchEvent(o);\n    }\n\n    /**\n     * fire initial state for non-HTML5 browsers\n     */\n    function fireInitialState() {\n        if (isFireInitialState) {\n            isFireInitialState = false;\n            firePopState();\n        }\n    }\n\n    /**\n     * Change the data of the current history for HTML4 browsers\n     *\n     * @param {Object} state\n     * @param {string} [url]\n     * @param {Boolean} [replace]\n     * @param {string} [lastURLValue]\n     * @return void\n     */\n    function changeState(state, url, replace, lastURLValue) {\n        if (!isSupportHistoryAPI) {\n            // normalization url\n            var urlObject = parseURL(url);\n            // if current url not equal new url\n            if (urlObject._relative !== parseURL()._relative) {\n                // if empty lastURLValue to skip hash change event\n                lastURL = lastURLValue;\n                if (replace) {\n                    // only replace hash, not store to history\n                    windowLocation.replace(\"#\" + urlObject._special);\n                } else {\n                    // change hash and add new record to history\n                    windowLocation.hash = urlObject._special;\n                }\n            }\n        }\n        if (!isSupportStateObjectInHistory && state) {\n            stateStorage[windowLocation.href] = state;\n        }\n        isFireInitialState = false;\n    }\n\n    /**\n     * Event handler function changes the hash in the address bar\n     *\n     * @param {Event} event\n     * @return void\n     */\n    function onHashChange(event) {\n        // if not empty lastURL, otherwise skipped the current handler event\n        if (lastURL) {\n            // if checkUrlForPopState equal current url, this means that the event was raised popstate browser\n            if (checkUrlForPopState !== windowLocation.href) {\n                // otherwise,\n                // the browser does not support popstate event or just does not run the event by changing the hash.\n                firePopState();\n            }\n            // current event object\n            event = event || window.event;\n\n            var oldURLObject = parseURL(lastURL, true);\n            var newURLObject = parseURL();\n            // HTML4 browser not support properties oldURL/newURL\n            if (!event.oldURL) {\n                event.oldURL = oldURLObject._href;\n                event.newURL = newURLObject._href;\n            }\n            if (oldURLObject._hash !== newURLObject._hash) {\n                // if current hash not equal previous hash\n                dispatchEvent(event);\n            }\n        }\n        // new value to lastURL\n        lastURL = windowLocation.href;\n    }\n\n    /**\n     * The event handler is fully loaded document\n     *\n     * @param {*} [noScroll]\n     * @return void\n     */\n    function onLoad(noScroll) {\n        // Get rid of the events popstate when the first loading a document in the webkit browsers\n        setTimeout(function() {\n            // hang up the event handler for the built-in popstate event in the browser\n            addEvent('popstate', function(e) {\n                // set the current url, that suppress the creation of the popstate event by changing the hash\n                checkUrlForPopState = windowLocation.href;\n                // for Safari browser in OS Windows not implemented 'state' object in 'History' interface\n                // and not implemented in old HTML4 browsers\n                if (!isSupportStateObjectInHistory) {\n                    e = redefineProperty(e, 'state', {get: function() {\n                        return historyObject.state;\n                    }});\n                }\n                // send events to be processed\n                dispatchEvent(e);\n            }, false);\n        }, 0);\n        // for non-HTML5 browsers\n        if (!isSupportHistoryAPI && noScroll !== true && historyObject.location) {\n            // scroll window to anchor element\n            scrollToAnchorId(historyObject.location.hash);\n            // fire initial state for non-HTML5 browser after load page\n            fireInitialState();\n        }\n    }\n\n    /**\n     * handler url with anchor for non-HTML5 browsers\n     *\n     * @param e\n     */\n    function onAnchorClick(e) {\n        var event = e || window.event;\n        var target = event.target || event.srcElement;\n        var defaultPrevented = \"defaultPrevented\" in event ? event['defaultPrevented'] : event.returnValue === false;\n        if (target && target.nodeName === \"A\" && !defaultPrevented) {\n            var current = parseURL();\n            var expect = parseURL(target.getAttribute(\"href\", 2));\n            var isEqualBaseURL = current._href.split('#').shift() === expect._href.split('#').shift();\n            if (isEqualBaseURL) {\n                if (current._hash !== expect._hash) {\n                    historyObject.location.hash = expect._hash;\n                }\n                scrollToAnchorId(expect._hash);\n                if (event.preventDefault) {\n                    event.preventDefault();\n                } else {\n                    event.returnValue = false;\n                }\n            }\n        }\n    }\n\n    /**\n     * Scroll page to current anchor in url-hash\n     *\n     * @param hash\n     */\n    function scrollToAnchorId(hash) {\n        var target = document.getElementById(hash = (hash || '').replace(/^#/, ''));\n        if (target && target.id === hash && target.nodeName === \"A\") {\n            var rect = target.getBoundingClientRect();\n            window.scrollTo((documentElement.scrollLeft || 0), rect.top + (documentElement.scrollTop || 0)\n                - (documentElement.clientTop || 0));\n        }\n    }\n\n    /**\n     * Library initialization\n     *\n     * @return {Boolean} return true if all is well, otherwise return false value\n     */\n    function initialize() {\n        /**\n         * Get custom settings from the query string\n         */\n        var scripts = document.getElementsByTagName('script');\n        var src = (scripts[scripts.length - 1] || {}).src || '';\n        var arg = src.indexOf('?') !== -1 ? src.split('?').pop() : '';\n        arg.replace(/(\\w+)(?:=([^&]*))?/g, function(a, key, value) {\n            settings[key] = (value || (key === 'basepath' ? '/' : '')).replace(/^(0|false)$/, '');\n        });\n\n        /**\n         * hang up the event handler to listen to the events hashchange\n         */\n        addEvent(eventNamePrefix + 'hashchange', onHashChange, false);\n\n        // a list of objects with pairs of descriptors/object\n        var data = [locationDescriptors, locationObject, eventsDescriptors, window, historyDescriptors, historyObject];\n\n        // if browser support object 'state' in interface 'History'\n        if (isSupportStateObjectInHistory) {\n            // remove state property from descriptor\n            delete historyDescriptors['state'];\n        }\n\n        // initializing descriptors\n        for(var i = 0; i < data.length; i += 2) {\n            for(var prop in data[i]) {\n                if (data[i].hasOwnProperty(prop)) {\n                    if (typeof data[i][prop] === 'function') {\n                        // If the descriptor is a simple function, simply just assign it an object\n                        data[i + 1][prop] = data[i][prop];\n                    } else {\n                        // prepare the descriptor the required format\n                        var descriptor = prepareDescriptorsForObject(data[i], prop, data[i][prop]);\n                        // try to set the descriptor object\n                        if (!redefineProperty(data[i + 1], prop, descriptor, function(n, o) {\n                            // is satisfied if the failed override property\n                            if (o === historyObject) {\n                                // the problem occurs in Safari on the Mac\n                                window.history = historyObject = data[i + 1] = n;\n                            }\n                        })) {\n                            // if there is no possibility override.\n                            // This browser does not support descriptors, such as IE7\n\n                            // remove previously hung event handlers\n                            removeEvent(eventNamePrefix + 'hashchange', onHashChange, false);\n\n                            // fail to initialize :(\n                            return false;\n                        }\n\n                        // create a repository for custom handlers onpopstate/onhashchange\n                        if (data[i + 1] === window) {\n                            eventsList[prop] = eventsList[prop.substr(2)] = [];\n                        }\n                    }\n                }\n            }\n        }\n\n        // redirect if necessary\n        if (settings['redirect']) {\n            historyObject['redirect']();\n        }\n\n        // If browser does not support object 'state' in interface 'History'\n        if (!isSupportStateObjectInHistory && JSON) {\n            storageInitialize(JSON);\n        }\n\n        // track clicks on anchors\n        if (!isSupportHistoryAPI) {\n            document[addEventListenerName](eventNamePrefix + \"click\", onAnchorClick, false);\n        }\n\n        if (document.readyState === 'complete') {\n            onLoad(true);\n        } else {\n            if (!isSupportHistoryAPI && parseURL()._relative !== settings[\"basepath\"]) {\n                isFireInitialState = true;\n            }\n            /**\n             * Need to avoid triggering events popstate the initial page load.\n             * Hang handler popstate as will be fully loaded document that\n             * would prevent triggering event onpopstate\n             */\n            addEvent(eventNamePrefix + 'load', onLoad, false);\n        }\n\n        // everything went well\n        return true;\n    }\n\n    /**\n     * Starting the library\n     */\n    if (!initialize()) {\n        // if unable to initialize descriptors\n        // therefore quite old browser and there\n        // is no sense to continue to perform\n        return;\n    }\n\n    /**\n     * If the property history.emulate will be true,\n     * this will be talking about what's going on\n     * emulation capabilities HTML5-History-API.\n     * Otherwise there is no emulation, ie the\n     * built-in browser capabilities.\n     *\n     * @type {boolean}\n     * @const\n     */\n    historyObject['emulate'] = !isSupportHistoryAPI;\n\n    /**\n     * Replace the original methods on the wrapper\n     */\n    window[addEventListenerName] = addEventListener;\n    window[removeEventListenerName] = removeEventListener;\n    window[dispatchEventName] = dispatchEvent;\n\n})(window);","// Make sure that polyfilled links are redirected to correct links in \n// supporting browsers. Enables sharing links between IE and non-IE\n// e.g. http://example.com/#/some-path -> http://example.com/some-path\nhistory.redirect();"]}